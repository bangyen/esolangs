name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit

    - name: Run pre-commit
      uses: pre-commit/action@v3.0.0

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Lint with ruff
      run: ruff check .
      continue-on-error: true

    - name: Format check with black
      run: black --check .
      continue-on-error: true

    - name: Type check with mypy
      run: mypy .
      continue-on-error: true

    - name: Test with pytest
      run: pytest --cov=. --cov-report=xml --cov-report=term-missing
      continue-on-error: true

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  interpreter-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Test basic interpreter functionality
      run: |
        # Test that interpreters can be imported and basic functionality works
        python -c "
        import sys
        sys.path.append('.')

        # Test a few key interpreters
        try:
            from tape_based.brainif import run as brainif_run
            from register_based.bio import run as bio_run
            from stack_based.bfstack import run as bfstack_run
            print('✓ Basic imports successful')
        except ImportError as e:
            print(f'✗ Import error: {e}')
            sys.exit(1)

        # Test program generator
        try:
            from miscellaneous.generate import bfstack, brainif
            result = bfstack('Hello')
            print('✓ Program generator working')
        except Exception as e:
            print(f'✗ Program generator error: {e}')
            sys.exit(1)

        print('✓ All basic tests passed')
        "
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security check
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true

    - name: Run safety check
      run: safety check --json --output safety-report.json
      continue-on-error: true
